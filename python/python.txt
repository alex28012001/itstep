Script + ООП
Расширение .py  
Кроссплатформенность   (3.6.0)
Print(“….”)- вывести на консоль
2**8 2 в степени 8
Input(“….”) Выводит текст и ждёт ввода пользователем (вводит как строка) (нужно в начале добавить int)
# - комментарий


type() - показывает тип "содержимого" (переменной , текста и т.д.)
pow(число,степень) - возводит число в степень
abs(число) - модуль числа
round(число) - округление  число 
type(True) - True пишется с большой буквы 


Конкатенация - объеденение объектов
\t - табуляция
\n - вертикальная табуляция
(text.upper())  - всё в верхем регистре
(text.lowler()) -нижний регистр
(text.title()) - Все первые буквы слов большие
(text.replace(слово,на какое слово заменить)
(text.swapcase()) -текст наоборот
x=int(x) - изменения типа (последующие input примут такое же значение)


import random - подключает библиотеку рандома
random.randint(0,1) - рандомное число(от о до 1)
random.randrange() - рандом от нуля до числа


for i in 1,2,3:
   print(i)

for i in range(0,4,1):
     
from math import ceil - подгружает функцию из библиотеки. (вместо math -библиотеку, вместо ceil - функцию)


def f(x,y):        - def инициализация функции, f - название функции, x и y - параметры функции
     res=x**y
     return res   (можно print(res))
global a - объявляет глобальную переменную

mass =[1,2,3,4,5,6,7,8,9,10,11] - создает массив
random.shuffle(mass) -перемешивает массив
a=mass.pop(0) - удаляет значение 0 из массива и присваивает в а






                                             ООП
class Critter(object):
                                           
     def __init__(self):
        print("New object has been born!")    ------ делает какое-либо действие при инициализации объекта
   
   
 def __str__(self):
        rep="Critter object\n"
        rep+="name: "+self.name+"\n"
        
        
        class Test_class(object):

    total=0
    @staticmethod
    def status():
        print("The total number of critters is",crit.total)
    def __str__(self):
        rep="Critter object\n"
        rep+="name: "+self.name+"\n"
        return rep
    def __init__(self):
        print("New object has been born!")
        Test_class.total+=1

    def talk(self,):
        print(crit)
    def  __Private_method(self):
        print("This is a private method")
    def public_method(self):
        print(crit.__Private_method())
        return rep                             ----представляет класс в виде строкового значения
